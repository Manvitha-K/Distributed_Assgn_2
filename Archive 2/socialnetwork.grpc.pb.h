// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: socialnetwork.proto
#ifndef GRPC_socialnetwork_2eproto__INCLUDED
#define GRPC_socialnetwork_2eproto__INCLUDED

#include "socialnetwork.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace socialnetwork {

class SocialNetwork final {
 public:
  static constexpr char const* service_full_name() {
    return "socialnetwork.SocialNetwork";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status follow(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::socialnetwork::reqResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::reqResponse>> Asyncfollow(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::reqResponse>>(AsyncfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::reqResponse>> PrepareAsyncfollow(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::reqResponse>>(PrepareAsyncfollowRaw(context, request, cq));
    }
    virtual ::grpc::Status unfollow(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::socialnetwork::reqResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::reqResponse>> Asyncunfollow(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::reqResponse>>(AsyncunfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::reqResponse>> PrepareAsyncunfollow(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::reqResponse>>(PrepareAsyncunfollowRaw(context, request, cq));
    }
    virtual ::grpc::Status list(::grpc::ClientContext* context, const ::socialnetwork::user& request, ::socialnetwork::followersList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::followersList>> Asynclist(::grpc::ClientContext* context, const ::socialnetwork::user& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::followersList>>(AsynclistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::followersList>> PrepareAsynclist(::grpc::ClientContext* context, const ::socialnetwork::user& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::followersList>>(PrepareAsynclistRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::reqResponse>* AsyncfollowRaw(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::reqResponse>* PrepareAsyncfollowRaw(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::reqResponse>* AsyncunfollowRaw(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::reqResponse>* PrepareAsyncunfollowRaw(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::followersList>* AsynclistRaw(::grpc::ClientContext* context, const ::socialnetwork::user& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::socialnetwork::followersList>* PrepareAsynclistRaw(::grpc::ClientContext* context, const ::socialnetwork::user& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status follow(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::socialnetwork::reqResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::socialnetwork::reqResponse>> Asyncfollow(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::socialnetwork::reqResponse>>(AsyncfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::socialnetwork::reqResponse>> PrepareAsyncfollow(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::socialnetwork::reqResponse>>(PrepareAsyncfollowRaw(context, request, cq));
    }
    ::grpc::Status unfollow(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::socialnetwork::reqResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::socialnetwork::reqResponse>> Asyncunfollow(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::socialnetwork::reqResponse>>(AsyncunfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::socialnetwork::reqResponse>> PrepareAsyncunfollow(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::socialnetwork::reqResponse>>(PrepareAsyncunfollowRaw(context, request, cq));
    }
    ::grpc::Status list(::grpc::ClientContext* context, const ::socialnetwork::user& request, ::socialnetwork::followersList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::socialnetwork::followersList>> Asynclist(::grpc::ClientContext* context, const ::socialnetwork::user& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::socialnetwork::followersList>>(AsynclistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::socialnetwork::followersList>> PrepareAsynclist(::grpc::ClientContext* context, const ::socialnetwork::user& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::socialnetwork::followersList>>(PrepareAsynclistRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::socialnetwork::reqResponse>* AsyncfollowRaw(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::socialnetwork::reqResponse>* PrepareAsyncfollowRaw(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::socialnetwork::reqResponse>* AsyncunfollowRaw(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::socialnetwork::reqResponse>* PrepareAsyncunfollowRaw(::grpc::ClientContext* context, const ::socialnetwork::followRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::socialnetwork::followersList>* AsynclistRaw(::grpc::ClientContext* context, const ::socialnetwork::user& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::socialnetwork::followersList>* PrepareAsynclistRaw(::grpc::ClientContext* context, const ::socialnetwork::user& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_follow_;
    const ::grpc::internal::RpcMethod rpcmethod_unfollow_;
    const ::grpc::internal::RpcMethod rpcmethod_list_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status follow(::grpc::ServerContext* context, const ::socialnetwork::followRequest* request, ::socialnetwork::reqResponse* response);
    virtual ::grpc::Status unfollow(::grpc::ServerContext* context, const ::socialnetwork::followRequest* request, ::socialnetwork::reqResponse* response);
    virtual ::grpc::Status list(::grpc::ServerContext* context, const ::socialnetwork::user* request, ::socialnetwork::followersList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_follow() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status follow(::grpc::ServerContext* context, const ::socialnetwork::followRequest* request, ::socialnetwork::reqResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfollow(::grpc::ServerContext* context, ::socialnetwork::followRequest* request, ::grpc::ServerAsyncResponseWriter< ::socialnetwork::reqResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_unfollow() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unfollow(::grpc::ServerContext* context, const ::socialnetwork::followRequest* request, ::socialnetwork::reqResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestunfollow(::grpc::ServerContext* context, ::socialnetwork::followRequest* request, ::grpc::ServerAsyncResponseWriter< ::socialnetwork::reqResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_list() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list(::grpc::ServerContext* context, const ::socialnetwork::user* request, ::socialnetwork::followersList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist(::grpc::ServerContext* context, ::socialnetwork::user* request, ::grpc::ServerAsyncResponseWriter< ::socialnetwork::followersList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_follow<WithAsyncMethod_unfollow<WithAsyncMethod_list<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_follow() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status follow(::grpc::ServerContext* context, const ::socialnetwork::followRequest* request, ::socialnetwork::reqResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_unfollow() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unfollow(::grpc::ServerContext* context, const ::socialnetwork::followRequest* request, ::socialnetwork::reqResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_list() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list(::grpc::ServerContext* context, const ::socialnetwork::user* request, ::socialnetwork::followersList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_follow() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::socialnetwork::followRequest, ::socialnetwork::reqResponse>(std::bind(&WithStreamedUnaryMethod_follow<BaseClass>::Streamedfollow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status follow(::grpc::ServerContext* context, const ::socialnetwork::followRequest* request, ::socialnetwork::reqResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedfollow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::socialnetwork::followRequest,::socialnetwork::reqResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_unfollow() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::socialnetwork::followRequest, ::socialnetwork::reqResponse>(std::bind(&WithStreamedUnaryMethod_unfollow<BaseClass>::Streamedunfollow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unfollow(::grpc::ServerContext* context, const ::socialnetwork::followRequest* request, ::socialnetwork::reqResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedunfollow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::socialnetwork::followRequest,::socialnetwork::reqResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_list() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::socialnetwork::user, ::socialnetwork::followersList>(std::bind(&WithStreamedUnaryMethod_list<BaseClass>::Streamedlist, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status list(::grpc::ServerContext* context, const ::socialnetwork::user* request, ::socialnetwork::followersList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlist(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::socialnetwork::user,::socialnetwork::followersList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_follow<WithStreamedUnaryMethod_unfollow<WithStreamedUnaryMethod_list<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_follow<WithStreamedUnaryMethod_unfollow<WithStreamedUnaryMethod_list<Service > > > StreamedService;
};

}  // namespace socialnetwork


#endif  // GRPC_socialnetwork_2eproto__INCLUDED
