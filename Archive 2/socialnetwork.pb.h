// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: socialnetwork.proto

#ifndef PROTOBUF_socialnetwork_2eproto__INCLUDED
#define PROTOBUF_socialnetwork_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_socialnetwork_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultstimelineResponseImpl();
void InitDefaultstimelineResponse();
void InitDefaultsreqResponseImpl();
void InitDefaultsreqResponse();
void InitDefaultsfollowersListImpl();
void InitDefaultsfollowersList();
void InitDefaultslistResponseImpl();
void InitDefaultslistResponse();
void InitDefaultsuserImpl();
void InitDefaultsuser();
void InitDefaultsfollowRequestImpl();
void InitDefaultsfollowRequest();
void InitDefaultsstatusImpl();
void InitDefaultsstatus();
inline void InitDefaults() {
  InitDefaultstimelineResponse();
  InitDefaultsreqResponse();
  InitDefaultsfollowersList();
  InitDefaultslistResponse();
  InitDefaultsuser();
  InitDefaultsfollowRequest();
  InitDefaultsstatus();
}
}  // namespace protobuf_socialnetwork_2eproto
namespace socialnetwork {
class followRequest;
class followRequestDefaultTypeInternal;
extern followRequestDefaultTypeInternal _followRequest_default_instance_;
class followersList;
class followersListDefaultTypeInternal;
extern followersListDefaultTypeInternal _followersList_default_instance_;
class listResponse;
class listResponseDefaultTypeInternal;
extern listResponseDefaultTypeInternal _listResponse_default_instance_;
class reqResponse;
class reqResponseDefaultTypeInternal;
extern reqResponseDefaultTypeInternal _reqResponse_default_instance_;
class status;
class statusDefaultTypeInternal;
extern statusDefaultTypeInternal _status_default_instance_;
class timelineResponse;
class timelineResponseDefaultTypeInternal;
extern timelineResponseDefaultTypeInternal _timelineResponse_default_instance_;
class user;
class userDefaultTypeInternal;
extern userDefaultTypeInternal _user_default_instance_;
}  // namespace socialnetwork
namespace socialnetwork {

// ===================================================================

class timelineResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:socialnetwork.timelineResponse) */ {
 public:
  timelineResponse();
  virtual ~timelineResponse();

  timelineResponse(const timelineResponse& from);

  inline timelineResponse& operator=(const timelineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  timelineResponse(timelineResponse&& from) noexcept
    : timelineResponse() {
    *this = ::std::move(from);
  }

  inline timelineResponse& operator=(timelineResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const timelineResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const timelineResponse* internal_default_instance() {
    return reinterpret_cast<const timelineResponse*>(
               &_timelineResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(timelineResponse* other);
  friend void swap(timelineResponse& a, timelineResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline timelineResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  timelineResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const timelineResponse& from);
  void MergeFrom(const timelineResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(timelineResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string updates = 1;
  int updates_size() const;
  void clear_updates();
  static const int kUpdatesFieldNumber = 1;
  const ::std::string& updates(int index) const;
  ::std::string* mutable_updates(int index);
  void set_updates(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_updates(int index, ::std::string&& value);
  #endif
  void set_updates(int index, const char* value);
  void set_updates(int index, const char* value, size_t size);
  ::std::string* add_updates();
  void add_updates(const ::std::string& value);
  #if LANG_CXX11
  void add_updates(::std::string&& value);
  #endif
  void add_updates(const char* value);
  void add_updates(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& updates() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_updates();

  // @@protoc_insertion_point(class_scope:socialnetwork.timelineResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> updates_;
  mutable int _cached_size_;
  friend struct ::protobuf_socialnetwork_2eproto::TableStruct;
  friend void ::protobuf_socialnetwork_2eproto::InitDefaultstimelineResponseImpl();
};
// -------------------------------------------------------------------

class reqResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:socialnetwork.reqResponse) */ {
 public:
  reqResponse();
  virtual ~reqResponse();

  reqResponse(const reqResponse& from);

  inline reqResponse& operator=(const reqResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  reqResponse(reqResponse&& from) noexcept
    : reqResponse() {
    *this = ::std::move(from);
  }

  inline reqResponse& operator=(reqResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const reqResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const reqResponse* internal_default_instance() {
    return reinterpret_cast<const reqResponse*>(
               &_reqResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(reqResponse* other);
  friend void swap(reqResponse& a, reqResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline reqResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  reqResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const reqResponse& from);
  void MergeFrom(const reqResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(reqResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:socialnetwork.reqResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 status_;
  mutable int _cached_size_;
  friend struct ::protobuf_socialnetwork_2eproto::TableStruct;
  friend void ::protobuf_socialnetwork_2eproto::InitDefaultsreqResponseImpl();
};
// -------------------------------------------------------------------

class followersList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:socialnetwork.followersList) */ {
 public:
  followersList();
  virtual ~followersList();

  followersList(const followersList& from);

  inline followersList& operator=(const followersList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  followersList(followersList&& from) noexcept
    : followersList() {
    *this = ::std::move(from);
  }

  inline followersList& operator=(followersList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const followersList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const followersList* internal_default_instance() {
    return reinterpret_cast<const followersList*>(
               &_followersList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(followersList* other);
  friend void swap(followersList& a, followersList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline followersList* New() const PROTOBUF_FINAL { return New(NULL); }

  followersList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const followersList& from);
  void MergeFrom(const followersList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(followersList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string followers = 1;
  int followers_size() const;
  void clear_followers();
  static const int kFollowersFieldNumber = 1;
  const ::std::string& followers(int index) const;
  ::std::string* mutable_followers(int index);
  void set_followers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_followers(int index, ::std::string&& value);
  #endif
  void set_followers(int index, const char* value);
  void set_followers(int index, const char* value, size_t size);
  ::std::string* add_followers();
  void add_followers(const ::std::string& value);
  #if LANG_CXX11
  void add_followers(::std::string&& value);
  #endif
  void add_followers(const char* value);
  void add_followers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& followers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_followers();

  // @@protoc_insertion_point(class_scope:socialnetwork.followersList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> followers_;
  mutable int _cached_size_;
  friend struct ::protobuf_socialnetwork_2eproto::TableStruct;
  friend void ::protobuf_socialnetwork_2eproto::InitDefaultsfollowersListImpl();
};
// -------------------------------------------------------------------

class listResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:socialnetwork.listResponse) */ {
 public:
  listResponse();
  virtual ~listResponse();

  listResponse(const listResponse& from);

  inline listResponse& operator=(const listResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  listResponse(listResponse&& from) noexcept
    : listResponse() {
    *this = ::std::move(from);
  }

  inline listResponse& operator=(listResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const listResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const listResponse* internal_default_instance() {
    return reinterpret_cast<const listResponse*>(
               &_listResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(listResponse* other);
  friend void swap(listResponse& a, listResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline listResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  listResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const listResponse& from);
  void MergeFrom(const listResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(listResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string users = 2;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 2;
  const ::std::string& users(int index) const;
  ::std::string* mutable_users(int index);
  void set_users(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_users(int index, ::std::string&& value);
  #endif
  void set_users(int index, const char* value);
  void set_users(int index, const char* value, size_t size);
  ::std::string* add_users();
  void add_users(const ::std::string& value);
  #if LANG_CXX11
  void add_users(::std::string&& value);
  #endif
  void add_users(const char* value);
  void add_users(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& users() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_users();

  // repeated string following_users = 3;
  int following_users_size() const;
  void clear_following_users();
  static const int kFollowingUsersFieldNumber = 3;
  const ::std::string& following_users(int index) const;
  ::std::string* mutable_following_users(int index);
  void set_following_users(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_following_users(int index, ::std::string&& value);
  #endif
  void set_following_users(int index, const char* value);
  void set_following_users(int index, const char* value, size_t size);
  ::std::string* add_following_users();
  void add_following_users(const ::std::string& value);
  #if LANG_CXX11
  void add_following_users(::std::string&& value);
  #endif
  void add_following_users(const char* value);
  void add_following_users(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& following_users() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_following_users();

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:socialnetwork.listResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> users_;
  ::google::protobuf::RepeatedPtrField< ::std::string> following_users_;
  ::google::protobuf::int32 status_;
  mutable int _cached_size_;
  friend struct ::protobuf_socialnetwork_2eproto::TableStruct;
  friend void ::protobuf_socialnetwork_2eproto::InitDefaultslistResponseImpl();
};
// -------------------------------------------------------------------

class user : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:socialnetwork.user) */ {
 public:
  user();
  virtual ~user();

  user(const user& from);

  inline user& operator=(const user& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  user(user&& from) noexcept
    : user() {
    *this = ::std::move(from);
  }

  inline user& operator=(user&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const user& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user* internal_default_instance() {
    return reinterpret_cast<const user*>(
               &_user_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(user* other);
  friend void swap(user& a, user& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline user* New() const PROTOBUF_FINAL { return New(NULL); }

  user* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const user& from);
  void MergeFrom(const user& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(user* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:socialnetwork.user)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  mutable int _cached_size_;
  friend struct ::protobuf_socialnetwork_2eproto::TableStruct;
  friend void ::protobuf_socialnetwork_2eproto::InitDefaultsuserImpl();
};
// -------------------------------------------------------------------

class followRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:socialnetwork.followRequest) */ {
 public:
  followRequest();
  virtual ~followRequest();

  followRequest(const followRequest& from);

  inline followRequest& operator=(const followRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  followRequest(followRequest&& from) noexcept
    : followRequest() {
    *this = ::std::move(from);
  }

  inline followRequest& operator=(followRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const followRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const followRequest* internal_default_instance() {
    return reinterpret_cast<const followRequest*>(
               &_followRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(followRequest* other);
  friend void swap(followRequest& a, followRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline followRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  followRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const followRequest& from);
  void MergeFrom(const followRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(followRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string followee = 1;
  void clear_followee();
  static const int kFolloweeFieldNumber = 1;
  const ::std::string& followee() const;
  void set_followee(const ::std::string& value);
  #if LANG_CXX11
  void set_followee(::std::string&& value);
  #endif
  void set_followee(const char* value);
  void set_followee(const char* value, size_t size);
  ::std::string* mutable_followee();
  ::std::string* release_followee();
  void set_allocated_followee(::std::string* followee);

  // string follower = 2;
  void clear_follower();
  static const int kFollowerFieldNumber = 2;
  const ::std::string& follower() const;
  void set_follower(const ::std::string& value);
  #if LANG_CXX11
  void set_follower(::std::string&& value);
  #endif
  void set_follower(const char* value);
  void set_follower(const char* value, size_t size);
  ::std::string* mutable_follower();
  ::std::string* release_follower();
  void set_allocated_follower(::std::string* follower);

  // @@protoc_insertion_point(class_scope:socialnetwork.followRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr followee_;
  ::google::protobuf::internal::ArenaStringPtr follower_;
  mutable int _cached_size_;
  friend struct ::protobuf_socialnetwork_2eproto::TableStruct;
  friend void ::protobuf_socialnetwork_2eproto::InitDefaultsfollowRequestImpl();
};
// -------------------------------------------------------------------

class status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:socialnetwork.status) */ {
 public:
  status();
  virtual ~status();

  status(const status& from);

  inline status& operator=(const status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  status(status&& from) noexcept
    : status() {
    *this = ::std::move(from);
  }

  inline status& operator=(status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const status* internal_default_instance() {
    return reinterpret_cast<const status*>(
               &_status_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(status* other);
  friend void swap(status& a, status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline status* New() const PROTOBUF_FINAL { return New(NULL); }

  status* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const status& from);
  void MergeFrom(const status& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reply = 1;
  void clear_reply();
  static const int kReplyFieldNumber = 1;
  const ::std::string& reply() const;
  void set_reply(const ::std::string& value);
  #if LANG_CXX11
  void set_reply(::std::string&& value);
  #endif
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  ::std::string* mutable_reply();
  ::std::string* release_reply();
  void set_allocated_reply(::std::string* reply);

  // @@protoc_insertion_point(class_scope:socialnetwork.status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reply_;
  mutable int _cached_size_;
  friend struct ::protobuf_socialnetwork_2eproto::TableStruct;
  friend void ::protobuf_socialnetwork_2eproto::InitDefaultsstatusImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// timelineResponse

// repeated string updates = 1;
inline int timelineResponse::updates_size() const {
  return updates_.size();
}
inline void timelineResponse::clear_updates() {
  updates_.Clear();
}
inline const ::std::string& timelineResponse::updates(int index) const {
  // @@protoc_insertion_point(field_get:socialnetwork.timelineResponse.updates)
  return updates_.Get(index);
}
inline ::std::string* timelineResponse::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:socialnetwork.timelineResponse.updates)
  return updates_.Mutable(index);
}
inline void timelineResponse::set_updates(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:socialnetwork.timelineResponse.updates)
  updates_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void timelineResponse::set_updates(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:socialnetwork.timelineResponse.updates)
  updates_.Mutable(index)->assign(std::move(value));
}
#endif
inline void timelineResponse::set_updates(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  updates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:socialnetwork.timelineResponse.updates)
}
inline void timelineResponse::set_updates(int index, const char* value, size_t size) {
  updates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:socialnetwork.timelineResponse.updates)
}
inline ::std::string* timelineResponse::add_updates() {
  // @@protoc_insertion_point(field_add_mutable:socialnetwork.timelineResponse.updates)
  return updates_.Add();
}
inline void timelineResponse::add_updates(const ::std::string& value) {
  updates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:socialnetwork.timelineResponse.updates)
}
#if LANG_CXX11
inline void timelineResponse::add_updates(::std::string&& value) {
  updates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:socialnetwork.timelineResponse.updates)
}
#endif
inline void timelineResponse::add_updates(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  updates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:socialnetwork.timelineResponse.updates)
}
inline void timelineResponse::add_updates(const char* value, size_t size) {
  updates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:socialnetwork.timelineResponse.updates)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
timelineResponse::updates() const {
  // @@protoc_insertion_point(field_list:socialnetwork.timelineResponse.updates)
  return updates_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
timelineResponse::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:socialnetwork.timelineResponse.updates)
  return &updates_;
}

// -------------------------------------------------------------------

// reqResponse

// int32 status = 1;
inline void reqResponse::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 reqResponse::status() const {
  // @@protoc_insertion_point(field_get:socialnetwork.reqResponse.status)
  return status_;
}
inline void reqResponse::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:socialnetwork.reqResponse.status)
}

// -------------------------------------------------------------------

// followersList

// repeated string followers = 1;
inline int followersList::followers_size() const {
  return followers_.size();
}
inline void followersList::clear_followers() {
  followers_.Clear();
}
inline const ::std::string& followersList::followers(int index) const {
  // @@protoc_insertion_point(field_get:socialnetwork.followersList.followers)
  return followers_.Get(index);
}
inline ::std::string* followersList::mutable_followers(int index) {
  // @@protoc_insertion_point(field_mutable:socialnetwork.followersList.followers)
  return followers_.Mutable(index);
}
inline void followersList::set_followers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:socialnetwork.followersList.followers)
  followers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void followersList::set_followers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:socialnetwork.followersList.followers)
  followers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void followersList::set_followers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  followers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:socialnetwork.followersList.followers)
}
inline void followersList::set_followers(int index, const char* value, size_t size) {
  followers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:socialnetwork.followersList.followers)
}
inline ::std::string* followersList::add_followers() {
  // @@protoc_insertion_point(field_add_mutable:socialnetwork.followersList.followers)
  return followers_.Add();
}
inline void followersList::add_followers(const ::std::string& value) {
  followers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:socialnetwork.followersList.followers)
}
#if LANG_CXX11
inline void followersList::add_followers(::std::string&& value) {
  followers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:socialnetwork.followersList.followers)
}
#endif
inline void followersList::add_followers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  followers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:socialnetwork.followersList.followers)
}
inline void followersList::add_followers(const char* value, size_t size) {
  followers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:socialnetwork.followersList.followers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
followersList::followers() const {
  // @@protoc_insertion_point(field_list:socialnetwork.followersList.followers)
  return followers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
followersList::mutable_followers() {
  // @@protoc_insertion_point(field_mutable_list:socialnetwork.followersList.followers)
  return &followers_;
}

// -------------------------------------------------------------------

// listResponse

// int32 status = 1;
inline void listResponse::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 listResponse::status() const {
  // @@protoc_insertion_point(field_get:socialnetwork.listResponse.status)
  return status_;
}
inline void listResponse::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:socialnetwork.listResponse.status)
}

// repeated string users = 2;
inline int listResponse::users_size() const {
  return users_.size();
}
inline void listResponse::clear_users() {
  users_.Clear();
}
inline const ::std::string& listResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:socialnetwork.listResponse.users)
  return users_.Get(index);
}
inline ::std::string* listResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:socialnetwork.listResponse.users)
  return users_.Mutable(index);
}
inline void listResponse::set_users(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:socialnetwork.listResponse.users)
  users_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void listResponse::set_users(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:socialnetwork.listResponse.users)
  users_.Mutable(index)->assign(std::move(value));
}
#endif
inline void listResponse::set_users(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:socialnetwork.listResponse.users)
}
inline void listResponse::set_users(int index, const char* value, size_t size) {
  users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:socialnetwork.listResponse.users)
}
inline ::std::string* listResponse::add_users() {
  // @@protoc_insertion_point(field_add_mutable:socialnetwork.listResponse.users)
  return users_.Add();
}
inline void listResponse::add_users(const ::std::string& value) {
  users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:socialnetwork.listResponse.users)
}
#if LANG_CXX11
inline void listResponse::add_users(::std::string&& value) {
  users_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:socialnetwork.listResponse.users)
}
#endif
inline void listResponse::add_users(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:socialnetwork.listResponse.users)
}
inline void listResponse::add_users(const char* value, size_t size) {
  users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:socialnetwork.listResponse.users)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
listResponse::users() const {
  // @@protoc_insertion_point(field_list:socialnetwork.listResponse.users)
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
listResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:socialnetwork.listResponse.users)
  return &users_;
}

// repeated string following_users = 3;
inline int listResponse::following_users_size() const {
  return following_users_.size();
}
inline void listResponse::clear_following_users() {
  following_users_.Clear();
}
inline const ::std::string& listResponse::following_users(int index) const {
  // @@protoc_insertion_point(field_get:socialnetwork.listResponse.following_users)
  return following_users_.Get(index);
}
inline ::std::string* listResponse::mutable_following_users(int index) {
  // @@protoc_insertion_point(field_mutable:socialnetwork.listResponse.following_users)
  return following_users_.Mutable(index);
}
inline void listResponse::set_following_users(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:socialnetwork.listResponse.following_users)
  following_users_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void listResponse::set_following_users(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:socialnetwork.listResponse.following_users)
  following_users_.Mutable(index)->assign(std::move(value));
}
#endif
inline void listResponse::set_following_users(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  following_users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:socialnetwork.listResponse.following_users)
}
inline void listResponse::set_following_users(int index, const char* value, size_t size) {
  following_users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:socialnetwork.listResponse.following_users)
}
inline ::std::string* listResponse::add_following_users() {
  // @@protoc_insertion_point(field_add_mutable:socialnetwork.listResponse.following_users)
  return following_users_.Add();
}
inline void listResponse::add_following_users(const ::std::string& value) {
  following_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:socialnetwork.listResponse.following_users)
}
#if LANG_CXX11
inline void listResponse::add_following_users(::std::string&& value) {
  following_users_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:socialnetwork.listResponse.following_users)
}
#endif
inline void listResponse::add_following_users(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  following_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:socialnetwork.listResponse.following_users)
}
inline void listResponse::add_following_users(const char* value, size_t size) {
  following_users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:socialnetwork.listResponse.following_users)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
listResponse::following_users() const {
  // @@protoc_insertion_point(field_list:socialnetwork.listResponse.following_users)
  return following_users_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
listResponse::mutable_following_users() {
  // @@protoc_insertion_point(field_mutable_list:socialnetwork.listResponse.following_users)
  return &following_users_;
}

// -------------------------------------------------------------------

// user

// string userid = 1;
inline void user::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user::userid() const {
  // @@protoc_insertion_point(field_get:socialnetwork.user.userid)
  return userid_.GetNoArena();
}
inline void user::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:socialnetwork.user.userid)
}
#if LANG_CXX11
inline void user::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:socialnetwork.user.userid)
}
#endif
inline void user::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:socialnetwork.user.userid)
}
inline void user::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:socialnetwork.user.userid)
}
inline ::std::string* user::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:socialnetwork.user.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user::release_userid() {
  // @@protoc_insertion_point(field_release:socialnetwork.user.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:socialnetwork.user.userid)
}

// -------------------------------------------------------------------

// followRequest

// string followee = 1;
inline void followRequest::clear_followee() {
  followee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& followRequest::followee() const {
  // @@protoc_insertion_point(field_get:socialnetwork.followRequest.followee)
  return followee_.GetNoArena();
}
inline void followRequest::set_followee(const ::std::string& value) {
  
  followee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:socialnetwork.followRequest.followee)
}
#if LANG_CXX11
inline void followRequest::set_followee(::std::string&& value) {
  
  followee_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:socialnetwork.followRequest.followee)
}
#endif
inline void followRequest::set_followee(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  followee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:socialnetwork.followRequest.followee)
}
inline void followRequest::set_followee(const char* value, size_t size) {
  
  followee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:socialnetwork.followRequest.followee)
}
inline ::std::string* followRequest::mutable_followee() {
  
  // @@protoc_insertion_point(field_mutable:socialnetwork.followRequest.followee)
  return followee_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* followRequest::release_followee() {
  // @@protoc_insertion_point(field_release:socialnetwork.followRequest.followee)
  
  return followee_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void followRequest::set_allocated_followee(::std::string* followee) {
  if (followee != NULL) {
    
  } else {
    
  }
  followee_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), followee);
  // @@protoc_insertion_point(field_set_allocated:socialnetwork.followRequest.followee)
}

// string follower = 2;
inline void followRequest::clear_follower() {
  follower_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& followRequest::follower() const {
  // @@protoc_insertion_point(field_get:socialnetwork.followRequest.follower)
  return follower_.GetNoArena();
}
inline void followRequest::set_follower(const ::std::string& value) {
  
  follower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:socialnetwork.followRequest.follower)
}
#if LANG_CXX11
inline void followRequest::set_follower(::std::string&& value) {
  
  follower_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:socialnetwork.followRequest.follower)
}
#endif
inline void followRequest::set_follower(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  follower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:socialnetwork.followRequest.follower)
}
inline void followRequest::set_follower(const char* value, size_t size) {
  
  follower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:socialnetwork.followRequest.follower)
}
inline ::std::string* followRequest::mutable_follower() {
  
  // @@protoc_insertion_point(field_mutable:socialnetwork.followRequest.follower)
  return follower_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* followRequest::release_follower() {
  // @@protoc_insertion_point(field_release:socialnetwork.followRequest.follower)
  
  return follower_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void followRequest::set_allocated_follower(::std::string* follower) {
  if (follower != NULL) {
    
  } else {
    
  }
  follower_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), follower);
  // @@protoc_insertion_point(field_set_allocated:socialnetwork.followRequest.follower)
}

// -------------------------------------------------------------------

// status

// string reply = 1;
inline void status::clear_reply() {
  reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& status::reply() const {
  // @@protoc_insertion_point(field_get:socialnetwork.status.reply)
  return reply_.GetNoArena();
}
inline void status::set_reply(const ::std::string& value) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:socialnetwork.status.reply)
}
#if LANG_CXX11
inline void status::set_reply(::std::string&& value) {
  
  reply_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:socialnetwork.status.reply)
}
#endif
inline void status::set_reply(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:socialnetwork.status.reply)
}
inline void status::set_reply(const char* value, size_t size) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:socialnetwork.status.reply)
}
inline ::std::string* status::mutable_reply() {
  
  // @@protoc_insertion_point(field_mutable:socialnetwork.status.reply)
  return reply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* status::release_reply() {
  // @@protoc_insertion_point(field_release:socialnetwork.status.reply)
  
  return reply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void status::set_allocated_reply(::std::string* reply) {
  if (reply != NULL) {
    
  } else {
    
  }
  reply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reply);
  // @@protoc_insertion_point(field_set_allocated:socialnetwork.status.reply)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace socialnetwork

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_socialnetwork_2eproto__INCLUDED
